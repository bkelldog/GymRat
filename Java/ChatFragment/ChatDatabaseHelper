package com.example.gymrattrial4;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;
import java.util.concurrent.TimeoutException;

public class ChatDatabaseHelper extends SQLiteOpenHelper {

    private static final String TAG = "Chat Database Helper";

    //Initialization
    private static final String DATABASE_NAME = "ChatDatabase";
    private static final int VERSION = 1;

    //Chat Logs
    /*
    Every text conversation will be stored as a table in this database.
    It will have five columns:
                              message_id,
                              sender_id,
                              timestamp,
                              message_text,
                              media_path;
     And it will be sorted by timestamp, in descending order (i.e. oldest
     messages at the bottom of the table, and top of the chat fragment).
     */
    private ArrayList<String> tableNames = new ArrayList<String>();
    private static final String TIME_SENT = "time_sent";
    private static final String SENDER_ID = "sender_id";
    private static final String MESSAGE_ID = "time_sent";
    private static final String MESSAGE_TEXT = "sender_id";
    private static final String MEDIA_PATH = "media_path";
    private static final String createTable = "CREATE TABLE ";
    private static final String createTable2 = "(" + TIME_SENT + " DATETIME DEFAULT CURRENT_TIMESTAMP," +
                                                SENDER_ID + " VARCHAR(9) NOT NULL," +
                                                MESSAGE_ID + "INTEGER PRIMARY KEY AUTOINCREMENT," +
                                                MESSAGE_TEXT + " TEXT," +
                                                MEDIA_PATH + " TEXT;";

    public ChatDatabaseHelper(Context context)
    {
        super(context, DATABASE_NAME, null, VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        for (String name : tableNames)
            db.execSQL(createTable + name + createTable2);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        for (String name : tableNames)
            db.execSQL("DROP TABLE IF EXISTS " + name);
        onCreate(db);
    }

    public void createTable(String tableName)
    {
        if (!tableName.equalsIgnoreCase(""))
        {
            SQLiteDatabase db = this.getWritableDatabase();
            tableNames.add(tableName);
            db.execSQL(createTable + tableName + createTable2);
        }
    }

    //---------------------------------<Insertion>-----------------------------------
    public boolean addMessage(String tableName, String message, String mediaPath, String sender_id)
    {
        SQLiteDatabase db = this.getWritableDatabase();

        String query = "INSERT INTO " + tableName;
        if (message == null && mediaPath != null)
        {
            query += " (" + SENDER_ID + ", " + MEDIA_PATH + ") VALUES (";
            query += sender_id + ", " + mediaPath + ");";
        }
        else if (message != null && mediaPath == null)
        {
            query += " (" + SENDER_ID + ", " + MESSAGE_TEXT + ") VALUES (";
            query += sender_id + ", " + message + ");";
        }
        else if (message == null && mediaPath == null)
            return false;
        else
        {
            query += " (" + SENDER_ID + ", " + MESSAGE_TEXT + ", " + MEDIA_PATH + ") VALUES (";
            query += sender_id + ", " + message + ", " + mediaPath + ");";
        }

        db.execSQL(query);

        return true;
    }

    //---------------------------------<Retrieval>--------------------------------------
    public String[][] getFirstFifty(String tableName)
    {
        return getFifty(tableName, 0);
    }

    public String[][] getFifty(String tableName, int startIndex)
    {
        String[][] messages = new String[50][3];
        for (int i = startIndex; i < startIndex + 50; i++)
        {
            String[][] singleMessage = getMessage(tableName, getTableHeight(tableName) - i);
            if (singleMessage == null)
                break;
            messages[i][0] = singleMessage[0][0];
            messages[i][1] = singleMessage[0][1];
            messages[i][2] = singleMessage[0][2];
        }
        return messages;
    }



    //Tools
    private String[][] getMessage(String tableName, int row)
    {
        String [][] message = null;
        SQLiteDatabase db = this.getWritableDatabase();
        String query = "SELECT " + SENDER_ID + ", " + MESSAGE_TEXT + ", " + MEDIA_PATH + " FROM " + tableName + " WHERE message_id=" + row + ";";
        Cursor c = db.rawQuery(query, null);
        if (c.moveToFirst())
        {
            message = new String[1][3];
            message[0][0] = c.getInt(c.getColumnIndex(SENDER_ID)) + "";
            message[0][1] = c.getString(c.getColumnIndex(MESSAGE_TEXT));
            message[0][2] = c.getString(c.getColumnIndex(MEDIA_PATH));
        }

        return message;
    }

    private int getTableHeight(String tableName)
    {
        SQLiteDatabase db = this.getWritableDatabase();
        int h = 0;

        Cursor c = db.rawQuery("SELECT * FROM " + tableName + ";", null);
        if (c.moveToFirst())
        {
            h = c.getInt(0);
        }
        return h;
    }

    //---------------------------------------<DELETION>-------------------------
    public void deleteRow(String tableName, int row)
    {
        SQLiteDatabase db = this.getWritableDatabase();
        db.execSQL("DELETE FROM " + tableName + " WHERE message_id = " + row + ";");
    }
}
